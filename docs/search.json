[
  {
    "objectID": "data-wrangling/filtering.html",
    "href": "data-wrangling/filtering.html",
    "title": "Filtering dataframes",
    "section": "",
    "text": "Filtering dataframes is a crucial skill of any data scientist and there is probably the most used method in data wrangling."
  },
  {
    "objectID": "data-wrangling/filtering.html#filter-by-is-equal-to",
    "href": "data-wrangling/filtering.html#filter-by-is-equal-to",
    "title": "Filtering dataframes",
    "section": "Filter by “is equal to”",
    "text": "Filter by “is equal to”\nThe most basic form of filtering is by comparing a search term with the values of a column in a dataframe.\n\nPythonRSQL\n\n\n\nz = 4\nif z % 2 == 0:  # True\n    print(\"z is even\")\n\nz is even\n\n\n\n\nin one line\n\nz = 4\nif (z %% 2 == 0) print(\"z is even\")\n\n[1] \"z is even\"\n\n\nin several lines\n\nz = 5\nif (z %% 2 != 0) {\n  print(\"z is not even\")\n}\n\n[1] \"z is not even\"\n\n\n\n\n\nselect\n  *\nfrom \n  customers\nwhere 0=0\n  and customer_name = 'Anthony Guerra';\n\n\n1 records\n\n\n\n\n\n\n\n\n\ncustomer_id\ncustomer_name\nemail\nphone_number\naddress\n\n\n\n\n8ab2552b-e4c9-471d-bdf1-ff6e225860e1\nAnthony Guerra\njanet90@example.net\n659.461.7580\n963 Regina Bridge Apt. 279\n\n\nPort Richard, NJ 42041"
  },
  {
    "objectID": "data-wrangling/faking.html",
    "href": "data-wrangling/faking.html",
    "title": "Faking data",
    "section": "",
    "text": "Faking data is very useful for populating test databases. In fact, the script below was used to generate the example data with the tables customers, orders, suppliers and products used on this website.\n\nPython\n\n\n\nfrom faker import Faker\nimport pandas as pd\nimport random\n\nfake = Faker()\n\n# Generating customers\nnum_customers = 300\ncustomers = []\nfor _ in range(num_customers):\n    customers.append({\n        'customer_id': fake.uuid4(),\n        'customer_name': fake.name(),\n        'email': fake.email(),\n        'phone_number': fake.phone_number(),\n        'address': fake.address()\n    })\n\n# Generating suppliers\nnum_suppliers = 12\nsuppliers = []\nfor _ in range(num_suppliers):\n    suppliers.append({\n        'supplier_id': fake.uuid4(),\n        'supplier_name': fake.company(),\n        'supplier_email': fake.company_email(),\n        'phone_number': fake.phone_number(),\n        'address': fake.address()\n    })\n\n# Generating products\nnum_products = 30\nproducts = []\nfor i in range(num_products):\n    products.append({\n        'product_id': i + 1,\n        'product_name': fake.word(),\n        'product_description': fake.text(),\n        'price': round(random.uniform(10, 1000), 2),\n        'supplier_id': random.choice(suppliers)['supplier_id']\n    })\n\n# Generating orders\nnum_orders = 500\norders = []\nfor _ in range(num_orders):\n    customer = random.choice(customers)\n    order = {\n        'order_id': fake.uuid4(),\n        'customer_id': customer['customer_id'],\n        'product_id': random.choice(products)['product_id'],\n        'quantity': random.randint(1, 5),\n        'order_date': fake.date_this_year(),\n        'delivery_date': fake.date_between(start_date='today', end_date='+30d')\n    }\n    orders.append(order)\n\n# Creating DataFrames\ncustomers_df = pd.DataFrame(customers)\nsuppliers_df = pd.DataFrame(suppliers)\nproducts_df = pd.DataFrame(products)\norders_df = pd.DataFrame(orders)\n\n# Saving to Excel file\nwith pd.ExcelWriter('db.xlsx', engine='openpyxl') as writer:\n    customers_df.to_excel(writer, sheet_name='Customers', index=False)\n    suppliers_df.to_excel(writer, sheet_name='Suppliers', index=False)\n    products_df.to_excel(writer, sheet_name='Products', index=False)\n    orders_df.to_excel(writer, sheet_name='Orders', index=False)\n    \n\n# Create an SQLite database and establish connection\nconn = sqlite3.connect('db.sqlite')\ncursor = conn.cursor()\n\n# Create tables\ncursor.execute('''\n    CREATE TABLE Customers (\n        customer_id TEXT PRIMARY KEY,\n        customer_name TEXT,\n        email TEXT,\n        phone_number TEXT,\n        address TEXT\n    )\n''')\n\ncursor.execute('''\n    CREATE TABLE Suppliers (\n        supplier_id TEXT PRIMARY KEY,\n        supplier_name TEXT,\n        supplier_email TEXT,\n        phone_number TEXT,\n        address TEXT\n    )\n''')\n\ncursor.execute('''\n    CREATE TABLE Products (\n        product_id INTEGER PRIMARY KEY,\n        product_name TEXT,\n        product_description TEXT,\n        price REAL,\n        supplier_id TEXT,\n        FOREIGN KEY(supplier_id) REFERENCES Suppliers(supplier_id)\n    )\n''')\n\ncursor.execute('''\n    CREATE TABLE Orders (\n        order_id TEXT PRIMARY KEY,\n        customer_id TEXT,\n        product_id INTEGER,\n        quantity INTEGER,\n        order_date TEXT,\n        delivery_date TEXT,\n        FOREIGN KEY(customer_id) REFERENCES Customers(customer_id),\n        FOREIGN KEY(product_id) REFERENCES Products(product_id)\n    )\n''')\n\n# Insert data into tables\ncursor.executemany('''\n    INSERT INTO Customers (customer_id, customer_name, email, phone_number, address)\n    VALUES (:customer_id, :customer_name, :email, :phone_number, :address)\n''', customers)\n\ncursor.executemany('''\n    INSERT INTO Suppliers (supplier_id, supplier_name, supplier_email, phone_number, address)\n    VALUES (:supplier_id, :supplier_name, :supplier_email, :phone_number, :address)\n''', suppliers)\n\ncursor.executemany('''\n    INSERT INTO Products (product_id, product_name, product_description, price, supplier_id)\n    VALUES (:product_id, :product_name, :product_description, :price, :supplier_id)\n''', products)\n\ncursor.executemany('''\n    INSERT INTO Orders (order_id, customer_id, product_id, quantity, order_date, delivery_date)\n    VALUES (:order_id, :customer_id, :product_id, :quantity, :order_date, :delivery_date)\n''', orders)\n\n# Commit changes and close connection\nconn.commit()\nconn.close()"
  },
  {
    "objectID": "data-wrangling/choices.html",
    "href": "data-wrangling/choices.html",
    "title": "Choices",
    "section": "",
    "text": "Choices enable you to run different code based on conditions / input. The most basic form of choices is the if statement.\n\nPythonRSQL\n\n\nNote, that all\n\nz = 4\nif z % 2 == 0:\n    print(\"z is even\")\nelse:\n    print(\"z is uneven\")\n\nz is even\n\n\n\n\nin one line\n\nz = 4\nif (z %% 2 == 0) print(\"z is even\") else print(\"z is odd\")\n\n[1] \"z is even\"\n\n\nin several lines\n\nz = 5\nif (z %% 2 == 0) {\n  print(\"z is even\")\n} else {\n  print(\"z is odd\")\n}\n\n[1] \"z is odd\"\n\n\n\n\nNote, that SQLite does not support the “normal” if statement. However, the same can be achieved with the case when statement.\n\n-- SQLite flavor\nselect\n  price\n  ,  case when price &gt;= 500 then 'high-price' else 'low-price' end as price_categ\nfrom\n  (select 750 as price)\nlimit 5;\n\n\n1 records\n\n\nprice\nprice_categ\n\n\n\n\n750\nhigh-price"
  },
  {
    "objectID": "data-wrangling/choices.html#the-if-statement",
    "href": "data-wrangling/choices.html#the-if-statement",
    "title": "Choices",
    "section": "",
    "text": "Choices enable you to run different code based on conditions / input. The most basic form of choices is the if statement.\n\nPythonRSQL\n\n\nNote, that all\n\nz = 4\nif z % 2 == 0:\n    print(\"z is even\")\nelse:\n    print(\"z is uneven\")\n\nz is even\n\n\n\n\nin one line\n\nz = 4\nif (z %% 2 == 0) print(\"z is even\") else print(\"z is odd\")\n\n[1] \"z is even\"\n\n\nin several lines\n\nz = 5\nif (z %% 2 == 0) {\n  print(\"z is even\")\n} else {\n  print(\"z is odd\")\n}\n\n[1] \"z is odd\"\n\n\n\n\nNote, that SQLite does not support the “normal” if statement. However, the same can be achieved with the case when statement.\n\n-- SQLite flavor\nselect\n  price\n  ,  case when price &gt;= 500 then 'high-price' else 'low-price' end as price_categ\nfrom\n  (select 750 as price)\nlimit 5;\n\n\n1 records\n\n\nprice\nprice_categ\n\n\n\n\n750\nhigh-price"
  },
  {
    "objectID": "data-wrangling/choices.html#the-elif-statement",
    "href": "data-wrangling/choices.html#the-elif-statement",
    "title": "Choices",
    "section": "The elif statement",
    "text": "The elif statement\nFor more complex choices, the elif or else if statement can be used.\n\n\n\n\n\n\nCaution\n\n\n\nKeep in mind, that only the line of code in the first ture condition will run. The order of conditions matters!\n\n\n\nPythonRSQL\n\n\n\ndef get_price_categ(price):\n  categ = str()\n  if price &gt; 1000:\n    categ = \"high\"\n  elif price &gt; 700:\n    categ = \"middle\"\n  elif price &gt; 300:\n    categ = \"low\"\n  elif price &gt; 0:\n    categ = \"super cheap\"\n  elif price == 0:\n    categ = \"free\"\n  else:\n    categ = \"there must be an error\"\n  return categ\n\nget_price_categ(750)  \n\n'middle'\n\n\n\n\nThe if in R works specifically or scalars.\n\nget_price_categ &lt;- function(price) {\n  categ &lt;- character()\n  if (price &gt; 1000) {\n    categ &lt;- \"high\"\n  } else if (price &gt; 700) {\n    categ &lt;- \"middle\"\n  } else if (price &gt; 300) {\n    categ &lt;- \"low\"\n  } else if (price &gt; 0) {\n    categ &lt;- \"super cheap\"\n  } else if (price == 0) {\n    categ &lt;- \"free\"\n  } else {\n    categ &lt;- \"there must be an error\"\n  }\n  return(categ)\n}\n\nget_price_categ(17)\n\n[1] \"super cheap\"\n\n\n\n\nNote, that many SQL flavors do not have a classic elif, but the case when can be used as an elif like the following:\n\n-- SQLite flavor\nselect \n  price,\n  case \n    when price &gt; 1000 then 'high'\n    when price &gt; 700 then 'middle'\n    when price &gt; 300 then 'low'\n    when price &gt; 0 then 'super cheap'\n    when price = 0 then 'free'\n    else 'there must be an error'\n  end as price_category\nfrom\n  (select 750 as price) as subquery;\n\n\n1 records\n\n\nprice\nprice_category\n\n\n\n\n750\nmiddle"
  },
  {
    "objectID": "data-wrangling/choices.html#the-if-elif-case-when-statement-for-vectors-columns",
    "href": "data-wrangling/choices.html#the-if-elif-case-when-statement-for-vectors-columns",
    "title": "Choices",
    "section": "The if / elif / case when statement for vectors / columns",
    "text": "The if / elif / case when statement for vectors / columns\nA classic task in data cleaning is changing the values of a column in a df to a different value, based on conditions.\n\nPythonRSQL\n\n\n\nimport pandas as pd\ndf = orders[['quantity']].copy()\ndf['order_size'] = df['quantity'].apply(lambda x: 'large' if x &gt;= 3 else 'small')\ndf = df.iloc[0:5]\n\nprint(df)\n\n\n\nThe ifelse in R works specifically for vectors.\n\ndf &lt;- orders %&gt;% \n  select(quantity) %&gt;% \n  mutate(order_size = ifelse(quantity &gt; 3, \"large\", \"small\")) %&gt;% \n  slice(1:5)\ndf\n\n# A tibble: 5 × 2\n  quantity order_size\n     &lt;dbl&gt; &lt;chr&gt;     \n1        2 small     \n2        5 large     \n3        3 small     \n4        2 small     \n5        1 small     \n\n\nFor more conditions, the dplyr::case_when feels more natural and improves readability, especially when having several conditions\n\ndf &lt;- orders %&gt;%\n  select(quantity) %&gt;% \n  mutate(\n    quantity_categ = case_when(\n      quantity == 1 ~ \"small\",\n      quantity %in% c(2, 3) ~ \"middle\",\n      quantity &gt; 3 ~ \"large\",\n      TRUE ~ \"there must be sth wrong\" # this line is like an \"else\"\n    )\n  ) %&gt;% \n  slice(1:5)\ndf\n\n# A tibble: 5 × 2\n  quantity quantity_categ\n     &lt;dbl&gt; &lt;chr&gt;         \n1        2 middle        \n2        5 large         \n3        3 middle        \n4        2 middle        \n5        1 small         \n\n\n\n\n\n-- SQLite flavor\nselect quantity,\n    case\n        when quantity = 1 then 'small'\n        when quantity IN (2, 3) then 'middle'\n        when quantity &gt; 3 then 'large'\n        else 'there must be sth wrong'\n    end as quantity_categ\nfrom orders\nlimit 5;\n\n\n5 records\n\n\nquantity\nquantity_categ\n\n\n\n\n2\nmiddle\n\n\n5\nlarge\n\n\n3\nmiddle\n\n\n2\nmiddle\n\n\n1\nsmall"
  },
  {
    "objectID": "data-wrangling/choices.html#the-switch-statement",
    "href": "data-wrangling/choices.html#the-switch-statement",
    "title": "Choices",
    "section": "The switch statement",
    "text": "The switch statement\nThe switch statement is especially useful for getting values from a dictionary-like construct with key and value.\n\nR\n\n\n\nget_height &lt;- function(x) {\n  switch(x,\n    \"eiffel tower\" = 330,\n    \"Burj Khalifa\" = 828,\n    \"Shanghai Tower\" = 632,\n    stop(\"not found\") # always include a \"not found\" for debugging purposes\n  )\n}\nget_height(\"Shanghai Tower\")\n\n[1] 632"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to coding-snippet",
    "section": "",
    "text": "Welcome to coding-snippet! We offer an open source collection of data science snippets in various programming languages like Python, R and SQL that are relevant for data-related problems. Our platform is specifically designed for data enthusiasts who are tired of scanning the internet over and over again for the very same code snippets they use in their daily data analysis tasks.\n\n\n\nCurated Code Snippets: We documented a wide range of code snippets for problems that come across a data analyst’s / data scientist’s work day all the time. Copy, paste and adjust the snippets according to your problem.\nProblem Oriented Approach: As data scientists, we jump between coding and query languages all the time; writing a database query in SQL, adding another data source from a python-based web-scraper and visualizing the beautifully aggregated data as a plot in R ggplot. We noticed, that most coders document their snippets in a language oriented manner, having e.g. one document per language. We believe in the problem oriented approach, where the snippets are organized according to the problem.\nPlatform for Collaboration: Become a collaborator on our Github repository and contribute to improving the quality and amount of the coding snippet base. We value your input and are always open for constructive criticism.\n\n\n\n\nWe believe, that a well-organized documentation of the different problems and tools helps the data science community to work more efficiently and helps rookies to get started much faster. Feel free for reaching out to us for an informal (virtual or in-person) coffee.\n\n\n\nFind us online here and on LinkedIn for the latest updates, discussions, and insights.\nThank you for taking part in our community and sharing our knowledge base with others!"
  },
  {
    "objectID": "index.html#about-us",
    "href": "index.html#about-us",
    "title": "Welcome to coding-snippet",
    "section": "",
    "text": "Welcome to coding-snippet! We offer an open source collection of data science snippets in various programming languages like Python, R and SQL that are relevant for data-related problems. Our platform is specifically designed for data enthusiasts who are tired of scanning the internet over and over again for the very same code snippets they use in their daily data analysis tasks.\n\n\n\nCurated Code Snippets: We documented a wide range of code snippets for problems that come across a data analyst’s / data scientist’s work day all the time. Copy, paste and adjust the snippets according to your problem.\nProblem Oriented Approach: As data scientists, we jump between coding and query languages all the time; writing a database query in SQL, adding another data source from a python-based web-scraper and visualizing the beautifully aggregated data as a plot in R ggplot. We noticed, that most coders document their snippets in a language oriented manner, having e.g. one document per language. We believe in the problem oriented approach, where the snippets are organized according to the problem.\nPlatform for Collaboration: Become a collaborator on our Github repository and contribute to improving the quality and amount of the coding snippet base. We value your input and are always open for constructive criticism.\n\n\n\n\nWe believe, that a well-organized documentation of the different problems and tools helps the data science community to work more efficiently and helps rookies to get started much faster. Feel free for reaching out to us for an informal (virtual or in-person) coffee.\n\n\n\nFind us online here and on LinkedIn for the latest updates, discussions, and insights.\nThank you for taking part in our community and sharing our knowledge base with others!"
  }
]