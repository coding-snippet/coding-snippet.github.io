[
  {
    "objectID": "data-wrangling/filtering.html",
    "href": "data-wrangling/filtering.html",
    "title": "Filtering dataframes",
    "section": "",
    "text": "Filtering dataframes is a crucial skill of any data scientist and there is probably the most used method in data wrangling."
  },
  {
    "objectID": "data-wrangling/filtering.html#filter-by-is-equal-to",
    "href": "data-wrangling/filtering.html#filter-by-is-equal-to",
    "title": "Filtering dataframes",
    "section": "Filter by “is equal to”",
    "text": "Filter by “is equal to”\nThe most basic form of filtering is by comparing a search term with the values of a column in a dataframe.\n\nPythonRSQL\n\n\n\nz = 4\nif z % 2 == 0:  # True\n    print(\"z is even\")\n\nz is even\n\n\n\n\nin one line\n\nz = 4\nif (z %% 2 == 0) print(\"z is even\")\n\n[1] \"z is even\"\n\nprint(customers)\n\n# A tibble: 300 × 5\n   customer_id                          customer_name email phone_number address\n   &lt;chr&gt;                                &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;  \n 1 8ab2552b-e4c9-471d-bdf1-ff6e225860e1 Anthony Guer… jane… 659.461.7580 \"963 R…\n 2 57a7c826-f022-4f6c-9a21-81d5f99da142 Elizabeth Ne… xben… 001-555-635… \"5745 …\n 3 6ff9e916-8596-4fc6-a224-fd1a6e163837 Gabrielle Ch… cjac… 943-259-602… \"165 R…\n 4 0706dd55-3603-4985-8136-76872925d39c Megan Elliott ryan… (668)271-02… \"049 A…\n 5 aa8662fc-f9c0-4e56-a498-693df376020a Kristin James broo… 815-164-705… \"2048 …\n 6 02306791-9603-4a34-b4c8-e6a7019fbe7f Tyler Greene  henr… 0769607875   \"344 D…\n 7 43976a56-94e0-4769-b7e8-c9f15d4a8511 Tammy Schwar… caro… (877)554-18… \"0870 …\n 8 ae209764-c4b2-4c27-82f7-d41f7e71aded Sarah Kennedy king… 001-784-128… \"609 S…\n 9 0230e24e-48c2-44ec-bbe8-f6aff9029bed Kevin Hodges  mich… 001-969-144… \"23923…\n10 6f7a4a4e-a87a-4f6d-927f-a8e2978b00a7 Nathan Mitch… will… 085.010.406… \"053 B…\n# ℹ 290 more rows\n\n\nin several lines\n\nz = 5\nif (z %% 2 != 0) {\n  print(\"z is not even\")\n}\n\n[1] \"z is not even\"\n\n\n\n\n\nselect\n  *\nfrom customers\nwhere customer_name = 'Anthony Guerra';\n\n\n1 records\n\n\n\n\n\n\n\n\n\ncustomer_id\ncustomer_name\nemail\nphone_number\naddress\n\n\n\n\n8ab2552b-e4c9-471d-bdf1-ff6e225860e1\nAnthony Guerra\njanet90@example.net\n659.461.7580\n963 Regina Bridge Apt. 279\n\n\nPort Richard, NJ 42041"
  },
  {
    "objectID": "data-wrangling/faking.html",
    "href": "data-wrangling/faking.html",
    "title": "Faking data",
    "section": "",
    "text": "Faking data is very useful for populating test databases. In fact, the script below was used to generate the example data with the tables customers, orders, suppliers and products used on this website.\n\nPython\n\n\n\nfrom faker import Faker\nimport pandas as pd\nimport random\n\nfake = Faker()\n\n# Generating customers\nnum_customers = 300\ncustomers = []\nfor _ in range(num_customers):\n    customers.append({\n        'customer_id': fake.uuid4(),\n        'customer_name': fake.name(),\n        'email': fake.email(),\n        'phone_number': fake.phone_number(),\n        'address': fake.address()\n    })\n\n# Generating suppliers\nnum_suppliers = 12\nsuppliers = []\nfor _ in range(num_suppliers):\n    suppliers.append({\n        'supplier_id': fake.uuid4(),\n        'supplier_name': fake.company(),\n        'supplier_email': fake.company_email(),\n        'phone_number': fake.phone_number(),\n        'address': fake.address()\n    })\n\n# Generating products\nnum_products = 30\nproducts = []\nfor i in range(num_products):\n    products.append({\n        'product_id': i + 1,\n        'product_name': fake.word(),\n        'product_description': fake.text(),\n        'price': round(random.uniform(10, 1000), 2),\n        'supplier_id': random.choice(suppliers)['supplier_id']\n    })\n\n# Generating orders\nnum_orders = 500\norders = []\nfor _ in range(num_orders):\n    customer = random.choice(customers)\n    order = {\n        'order_id': fake.uuid4(),\n        'customer_id': customer['customer_id'],\n        'product_id': random.choice(products)['product_id'],\n        'quantity': random.randint(1, 5),\n        'order_date': fake.date_this_year(),\n        'delivery_date': fake.date_between(start_date='today', end_date='+30d')\n    }\n    orders.append(order)\n\n# Creating DataFrames\ncustomers_df = pd.DataFrame(customers)\nsuppliers_df = pd.DataFrame(suppliers)\nproducts_df = pd.DataFrame(products)\norders_df = pd.DataFrame(orders)\n\n# Saving to Excel file\nwith pd.ExcelWriter('db.xlsx', engine='openpyxl') as writer:\n    customers_df.to_excel(writer, sheet_name='Customers', index=False)\n    suppliers_df.to_excel(writer, sheet_name='Suppliers', index=False)\n    products_df.to_excel(writer, sheet_name='Products', index=False)\n    orders_df.to_excel(writer, sheet_name='Orders', index=False)\n    \n\n# Create an SQLite database and establish connection\nconn = sqlite3.connect('db.sqlite')\ncursor = conn.cursor()\n\n# Create tables\ncursor.execute('''\n    CREATE TABLE Customers (\n        customer_id TEXT PRIMARY KEY,\n        customer_name TEXT,\n        email TEXT,\n        phone_number TEXT,\n        address TEXT\n    )\n''')\n\ncursor.execute('''\n    CREATE TABLE Suppliers (\n        supplier_id TEXT PRIMARY KEY,\n        supplier_name TEXT,\n        supplier_email TEXT,\n        phone_number TEXT,\n        address TEXT\n    )\n''')\n\ncursor.execute('''\n    CREATE TABLE Products (\n        product_id INTEGER PRIMARY KEY,\n        product_name TEXT,\n        product_description TEXT,\n        price REAL,\n        supplier_id TEXT,\n        FOREIGN KEY(supplier_id) REFERENCES Suppliers(supplier_id)\n    )\n''')\n\ncursor.execute('''\n    CREATE TABLE Orders (\n        order_id TEXT PRIMARY KEY,\n        customer_id TEXT,\n        product_id INTEGER,\n        quantity INTEGER,\n        order_date TEXT,\n        delivery_date TEXT,\n        FOREIGN KEY(customer_id) REFERENCES Customers(customer_id),\n        FOREIGN KEY(product_id) REFERENCES Products(product_id)\n    )\n''')\n\n# Insert data into tables\ncursor.executemany('''\n    INSERT INTO Customers (customer_id, customer_name, email, phone_number, address)\n    VALUES (:customer_id, :customer_name, :email, :phone_number, :address)\n''', customers)\n\ncursor.executemany('''\n    INSERT INTO Suppliers (supplier_id, supplier_name, supplier_email, phone_number, address)\n    VALUES (:supplier_id, :supplier_name, :supplier_email, :phone_number, :address)\n''', suppliers)\n\ncursor.executemany('''\n    INSERT INTO Products (product_id, product_name, product_description, price, supplier_id)\n    VALUES (:product_id, :product_name, :product_description, :price, :supplier_id)\n''', products)\n\ncursor.executemany('''\n    INSERT INTO Orders (order_id, customer_id, product_id, quantity, order_date, delivery_date)\n    VALUES (:order_id, :customer_id, :product_id, :quantity, :order_date, :delivery_date)\n''', orders)\n\n# Commit changes and close connection\nconn.commit()\nconn.close()"
  },
  {
    "objectID": "data-wrangling/choices.html",
    "href": "data-wrangling/choices.html",
    "title": "Choices",
    "section": "",
    "text": "Choices enable you to run different code based on conditions / input. The most basic form of choices is the if statement.\n\nPythonRSQL\n\n\n\nz = 4\nif z % 2 == 0:  # True\n    print(\"z is even\")\n\nz is even\n\n\n\n\nin one line\n\nz = 4\nif (z %% 2 == 0) print(\"z is even\")\n\n[1] \"z is even\"\n\n\nin several lines\n\nz = 5\nif (z %% 2 != 0) {\n  print(\"z is not even\")\n}\n\n[1] \"z is not even\"\n\n\n\n\n\nSELECT\n  name\n  , age\n  , if age &gt; 65 THEN 'oldie, but goldie' else 'adult or underaged' endif as 'Age Group'\nfrom persons;"
  },
  {
    "objectID": "data-wrangling/choices.html#the-if-else-statement",
    "href": "data-wrangling/choices.html#the-if-else-statement",
    "title": "Choices",
    "section": "",
    "text": "Choices enable you to run different code based on conditions / input. The most basic form of choices is the if statement.\n\nPythonRSQL\n\n\n\nz = 4\nif z % 2 == 0:  # True\n    print(\"z is even\")\n\nz is even\n\n\n\n\nin one line\n\nz = 4\nif (z %% 2 == 0) print(\"z is even\")\n\n[1] \"z is even\"\n\n\nin several lines\n\nz = 5\nif (z %% 2 != 0) {\n  print(\"z is not even\")\n}\n\n[1] \"z is not even\"\n\n\n\n\n\nSELECT\n  name\n  , age\n  , if age &gt; 65 THEN 'oldie, but goldie' else 'adult or underaged' endif as 'Age Group'\nfrom persons;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to coding-snippet",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites\n\nPlotData\n\n\n\nprint(\"hello world\")\n\n[1] \"hello world\"\n\n\n\n\n\n1+1\n\n[1] 2"
  }
]