---
title: "Altering"
---
```{r, setup, include=FALSE}
source("setup.R")
```

```{python}
#| echo: false
#| message: false
orders = r.orders
products = r.products
customers = r.customers
suppliers = r.suppliers
```

## Move columns

::: {.panel-tabset}
## Python

```{python}
import pandas as pd

# Assuming customers is your DataFrame
df_reordered = customers[['customer_name'] + list(customers.columns.drop('customer_name'))]
df_reordered
```

## R

```{r}

df_reordered = customers %>% 
  select(customer_name, email, everything()) # move name to beginning

df_reordered_2 = customers %>% 
  relocate(customer_id, .after = last_col()) # move name to end

df_reordered_3 = customers %>% 
  relocate(email, .before = "customer_name") # move name to end

df_reordered_3
```

## SQL

```{sql}
#| connection: con
SELECT
  customer_name, -- just choose the order in the select statement
  customer_id,
  email,
  phone_number
FROM 
  customers;
```
:::

## Rename columns 

::: {.panel-tabset}
## Python

```{python}
import pandas as pd

# rename the 'customer_name' column to 'Name'
renamed = customers.rename(columns={'customer_name': 'Name'})

print(renamed)
```

## R

# Renaming specific columns
```{r}

renamed = customers %>% 
  rename(
    Name = customer_name,
    E_Mail = email
  )
renamed

# using df %>% janitor::clean_names() u can get rid of white spaces, dots, etc.

```


## SQL

```{sql}
#| connection: con
SELECT
  customer_name as Name,
  customer_id,
  email,
  phone_number
FROM 
  customers;
```
:::

## Pivotise / reshape data
Using pivot transformations is very important for data visualisations.


::: {.panel-tabset}

## R

### transforming data to longer format
```{r}

library(tibble)
library(tidyr)

wide_data <- tibble(
  id = c(1, 2, 3),
  time1 = c(10, 15, 20),
  time2 = c(12, 18, 22),
  time3 = c(14, 21, 24)
)

# Original wide data
print("Wide data:")
print(wide_data)

# Using pivot_longer to convert to long format
long_data <- wide_data %>%
  pivot_longer(cols = starts_with("time"), 
               names_to = "time_point", 
               values_to = "measurement")

# Long format data
print("Long format data:")
print(long_data)
```

### transforming data to wider format
```{r}

library(tibble)
library(tidyr)

wide_data <- long_data %>% 
  pivot_wider(
    names_from = "time_point",
    values_from = "measurement"
  )

print("Wide data:")
print(wide_data)

```

## SQL

```{sql}
#| connection: con
SELECT
  customer_name as Name,
  customer_id,
  email,
  phone_number
FROM 
  customers;
```
:::
