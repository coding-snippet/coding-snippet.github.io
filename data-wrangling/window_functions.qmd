---
title: "Window functions"
---
```{r, setup, include=FALSE}
source("setup.R")
```

```{python}
#| echo: false
#| message: false

orders = r.orders
products = r.products
customers = r.customers
suppliers = r.suppliers
```

## Introduction
For advanced queries, window functions are very useful to perform calculations based on partition, order and function in a set of rows. They allow to put the current row into context with other rows and perform tasks such as ranking, aggregating, and using analytic functions.

### The Main Types of Window Functions
- *Ranking Functions:* Assign e.g. a row number or a rank to a row based on defined criteria. Examples are `rank`, `dense_rank`, `row_number` etc.
- *Aggregate Functions:* Aggregate values over the defined partition `avg`, `sum`, `count`.
- *Analytic Functions:* Operate on a range of rows around the current row. Examples are `lead`, `lag`, `first_value`, `last_value`, `nth_value`, `ntile` etc.

As always, an example says more than a thousand words:

## Ranking Functions
At first glance, it may seem, that the ranking functions all produce the same results. When taking a closer look we notice, that there are slight differences. The `row_number` will assign a unique value to each row in the window, whereas `rank` will assign the same value for the same criteria; as in the example below, if there were two values of `total_cost` that were exactly the same within the window, the rank function would assign the same value (e.g. both `2`) and then skip one value (i.e. skip `3` and proceed with `4`). The `dense_rank` is like the rank but without skipping the preceding value.

::: {.panel-tabset}

## SQL

```{sql}
#| connection: con

with sales as (
  select
    c.customer_name  
    , p.product_name
    , p.price
    , o.quantity
    , p.price * o.quantity as total_cost
    , order_date
    , strftime('%Y', order_date) || '-' || strftime('%W', order_date) as yyyy_ww
    
  from 
    orders as o
  inner join products as p on
    p.product_id = o.product_id
  inner join customers as c on
   c.customer_id = o.customer_id
)

select
  *
  , row_number() over(partition by yyyy_ww order by price desc) as rn
  , rank() over(partition by yyyy_ww order by price desc) as rank
  , dense_rank() over(partition by yyyy_ww order by price desc) as dense_rank
from
  sales
order by
  yyyy_ww asc, rn asc
limit 15 offset 4;

```
## Python
```{python}
import pandas as pd

merged_df = pd.merge(orders, products, how='inner', on='product_id')
merged_df = pd.merge(merged_df, customers, how='inner', on='customer_id')

# Calculating total_cost and yyyy_ww
merged_df['total_cost'] = merged_df['price'] * merged_df['quantity']
merged_df['yyyy_ww'] = merged_df['order_date'].dt.strftime('%Y-%W')

merged_df['rn'] = merged_df.groupby('yyyy_ww')['price'].transform(lambda x: x.rank(method='first', ascending=False))
merged_df['rank'] = merged_df.groupby('yyyy_ww')['price'].rank(method='min', ascending=False)
merged_df['dense_rank'] = merged_df.groupby('yyyy_ww')['price'].rank(method='dense', ascending=False)

# Selecting specific columns
selected_columns = [
    'customer_name', 'product_name', 'price', 'quantity', 'order_date',
    'rn', 'rank', 'dense_rank'
]

result_df = merged_df.sort_values(by=['yyyy_ww', 'rn']).head(15)[selected_columns].iloc[4:15]

print(result_df)


```
## R

```{r}
library(dplyr)
library(tidyr)

sales <- orders %>%
  inner_join(products, by = "product_id") %>%
  inner_join(customers, by = "customer_id") %>%
  mutate(
    total_cost = price * quantity,
    yyyy_ww = paste0(strftime(order_date, "%Y"), "-", strftime(order_date, "%W"))
  )

sales <- sales %>%
  arrange(yyyy_ww, desc(price)) %>%
  group_by(yyyy_ww) %>%
  mutate(
    rn = row_number(desc(price)),
    rank = rank(desc(price)),
    dense_rank = dense_rank(desc(price))
  ) %>%
  ungroup() %>% # dplyr uses the ungroup() as pendant to window functions
  select( rn, rank, dense_rank, customer_name, product_name,
          price, quantity, order_date,
  ) %>%
  slice(5:15)
sales

```

:::

## Aggregating Functions
They are very useful to aggregate data on specified criteria using a window. The window can be aggregated using the partition clause and ordered by the order clause. Finally, a window can be set using `rows between X preceding and Y following` with X and Y being integers or unbounded, if we want the window to start from start to the end. It is also possible to set a range instead of rows

::: {.panel-tabset}

## SQL

```{sql}
#| connection: con

with sales as (
  select
    c.customer_id
    , p.product_name
    , p.price
    , o.quantity
    , p.price * o.quantity as total_cost
    , order_date
  from 
    orders as o
  inner join products as p on
    p.product_id = o.product_id
  inner join customers as c on
    c.customer_id = o.customer_id
)

select
  *
  , avg(total_cost) over(order by order_date rows between 1 preceding and 1 following) as avg_3_rows
  , sum(total_cost) over(order by order_date rows unbounded preceding) as running_sum
  , count() over(partition by customer_id) as orders_per_cust
from
  sales
order by
  order_date
  
```
## Python
```{python}
import pandas as pd

sales = pd.merge(orders, products, on='product_id').merge(customers, on='customer_id')
sales['total_cost'] = sales['price'] * sales['quantity']
sales = sales.sort_values('order_date')
sales['avg_3_rows'] = sales['total_cost'].rolling(window=3, min_periods=1).mean()
sales['running_sum'] = sales['total_cost'].cumsum()
sales['orders_per_cust'] = sales.groupby('customer_id')['customer_id'].transform('count')
result = sales[['customer_id', 'product_name', 'price', 'quantity', 'total_cost', 'order_date', 'avg_3_rows', 'running_sum', 'orders_per_cust']]
result = result.sort_values('order_date').reset_index(drop=True)
print(result)

```
## R
Note that the results around the first and last rows may differ compared to the sql junk, since the window functions are differently implemented in sql and R.
```{r}
library(tidyverse)
library(slider)

sales <- orders %>%
  inner_join(products, by = "product_id") %>%
  inner_join(customers, by = "customer_id") %>%
  mutate(total_cost = price * quantity) %>% 
  select(
    customer_id,
    product_name,
    price,
    quantity,
    total_cost,
    order_date
  )

result <- sales %>%
  arrange(order_date) %>%
  mutate(
    avg_3_rows = slide_dbl(total_cost, mean, .before = 1, .after = 1, .complete = TRUE),
    running_sum = cumsum(total_cost),
    orders_per_cust = n()
  ) %>%
  group_by(customer_id) %>%
  mutate(
    orders_per_cust = n()
  ) %>%
  ungroup() %>%
  arrange(order_date)

result
```

:::
